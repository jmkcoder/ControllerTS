const fs = require('fs');
const path = require('path');
const glob = require('glob');

/**
 * Webpack plugin to generate dynamic controller imports
 * This replaces the need for require.context by generating the imports at build time
 */
class GenerateControllerImportsPlugin {
  apply(compiler) {
    compiler.hooks.beforeCompile.tapAsync('GenerateControllerImportsPlugin', (params, callback) => {
      // Find all controller files
      const srcPath = path.join(compiler.context, 'src');
      const controllerFiles = glob.sync('**/*Controller.ts', { cwd: srcPath });
      
      // Filter out core/controller.ts (base class)
      const actualControllers = controllerFiles.filter(file => 
        !file.includes('core/controller.ts') && 
        !file.includes('core\\controller.ts')
      );
      
      // Generate the import statements
      const imports = actualControllers.map((file, index) => {
        // Convert Windows backslashes to forward slashes for import paths
        const normalizedPath = file.replace(/\\/g, '/').replace(/\.ts$/, '');
        const importPath = `../${normalizedPath}`;
        const variableName = `controller${index}`;
        return {
          import: `const ${variableName} = () => import('${importPath}');`,
          path: file,
          variable: variableName
        };
      });

      // Generate the module mapping
      const moduleMap = imports.map(({ path, variable }) => {
        const normalizedPath = path.replace(/\\/g, '/');
        return `  '../${normalizedPath}': ${variable}`;
      }).join(',\n');
      
      // Create the generated file content
      const generatedContent = `// AUTO-GENERATED FILE - DO NOT EDIT
// Generated by GenerateControllerImportsPlugin

${imports.map(i => i.import).join('\n')}

export const controllerModules = {
${moduleMap}
};

export const getControllerCount = () => ${imports.length};
`;

      // Write the generated file only if content has changed
      const outputPath = path.join(srcPath, 'core', 'generated-controllers.ts');
      
      // Check if file exists and compare content
      let shouldWrite = true;
      if (fs.existsSync(outputPath)) {
        const existingContent = fs.readFileSync(outputPath, 'utf8');
        shouldWrite = existingContent !== generatedContent;
      }
      
      if (shouldWrite) {
        fs.writeFileSync(outputPath, generatedContent);
        console.log(`âœ… Generated ${imports.length} controller imports in generated-controllers.ts`);
      }
      
      callback();
    });
  }
}

module.exports = GenerateControllerImportsPlugin;
